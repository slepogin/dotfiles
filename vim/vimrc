" vim: set foldmethod=marker foldlevel=0 nomodeline:

" .vimrc of Nikita Slepogin {{{
" Normally `:set nocp` is not needed, because it is done automatically
if &compatible
  set nocompatible
endif

if has('nvim')
    set runtimepath^=~/.vim runtimepath+=~/.vim/after
    let &packpath = &runtimepath
endif

" Space leader works best for me
let g:mapleader = "\<Space>"
let g:maplocalleader = "\<Space>"

let g:neovim2_venv=expand('~/venvs/neovim2/bin/python')
let g:neovim3_venv=expand('~/venvs/neovim3/bin/python')
let g:plugins_location=expand('~/.config/nvim/plugged')

augroup vimrc
    autocmd!
augroup END

if !empty(glob(g:neovim2_venv))
    let g:python_host_prog=g:neovim2_venv
endif

if !empty(glob(g:neovim3_venv))
    let g:python3_host_prog=g:neovim3_venv
endif

if !filereadable(expand('~/.vim/autoload/plug.vim'))
    execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif
" }}}

" VIM-PLUG Plugins {{{

silent! if plug#begin(g:plugins_location)
Plug 'arcticicestudio/nord-vim' " Awesome Arctic theme
Plug 'mhinz/vim-signify' " Git changes in signcolumn
Plug 'tpope/vim-fugitive' " Git integration like Blame, Commit etc.
Plug 'tpope/vim-commentary' " Commenting helper (gcc gcu)
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesEnable' } " Indent lines when needed
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Awesome fuzzy searcher
Plug 'junegunn/fzf.vim' " Vim integration for fzf
Plug 'junegunn/goyo.vim' " Distraction free mode like in iaWriter
Plug 'junegunn/vim-slash'
Plug 'justinmk/vim-gtfo'
Plug 'preservim/nerdtree'
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } " Awesome undo changes viewer
Plug 'christoomey/vim-tmux-navigator'
Plug 'sheerun/vim-polyglot'
Plug 'vimwiki/vimwiki', { 'branch': 'dev'}
Plug 'machakann/vim-sandwich'
if has('nvim-0.5')
  Plug 'neovim/nvim-lsp'
  Plug 'lifepillar/vim-mucomplete'
endif

" signify {{{
set updatetime=100
" }}}

" undotree {{{
let g:undotree_WindowLayout = 3
let g:undotree_SplitWidth = 35
let g:undotree_DiffpanelHeight = 10
nnoremap U :UndotreeToggle<CR>
" }}}

" indentLine {{{
let g:indentLine_leadingSpaceEnabled = 0
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
let g:indentLine_char = '▏'  " ¦┆│⎸▏
let g:indent_blankline_char = g:indentLine_char
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_setColors = 0  " disable overwrite with grey by default, use colorscheme instead
autocmd! User indentLine doautocmd indentLine Syntax
" }}}

" netrw {{{
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 0
let g:netrw_winsize = -25
let g:netrw_sort_sequence = '[\/]$,*'
let g:netrw_list_hide='.*\.git/$,'.netrw_gitignore#Hide()
if has('nvim')
  augroup netrw_setup
    autocmd!
    autocmd FileType netrw setl bufhidden=wipe
    autocmd FileType netrw nnoremap <buffer> q :Rexplore<CR>
  augroup END
endif
" }}}

" NERDTree {{{
let g:NERDTreeShowBookmarks=1
let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '^\.git$']
let g:NERDTreeChDirMode=0
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeMouseMode=2
let g:NERDTreeShowHidden=1
let g:NERDTreeKeepTreeInNewTab=1
let g:NERDTreeWinSize = 35
let g:NERDTreeDirArrowExpandable = "\u00a0"
let g:NERDTreeDirArrowCollapsible = "\u00a0"
let g:nerdtree_tabs_open_on_gui_startup=0
nnoremap <silent> - :NERDTreeToggle<cr>
" }}}

" tagbar {{{
let g:tagbar_sort = 1
let g:tagbar_left = 1
let g:tagbar_autofocus = 1
nnoremap T :TagbarToggle<CR>
" }}}

" vimwiki {{{
let g:vimwiki_list = [{'path': '~/Documents/Notes',
      \'syntax': 'markdown', 'ext': '.md', 'index': '.index',
      \'diary_rel_path': 'Journal/', 'diary_index': '.index'}]
" }}}

" persistent_undo {{{
if has("persistent_undo")
  let &undodir=expand("~/.config/nvim/undo")
  " Only user should be alowed to undo history.
  if !isdirectory(&undodir) | call mkdir(&undodir, "p", 0700) | endif
  " With autosaves and undo no need in swap and backup.
  set nobackup noswapfile undofile
  " Autosave buffers on change.
  augroup autosave
    autocmd!
    autocmd TextChanged,InsertLeave *
          \ if empty(&buftype) && !empty(bufname('')) |
          \   silent! update |
          \ endif
  augroup END
endif
" }}}

" statusline {{{
function! s:statusline_expr()
  let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
  let ro  = "%{&readonly ? '[RO] ' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  " let lsp = "%{exists('lsp_attached') ? '[LSP:on] ' : ''}"
  let sep = ' %= '
  let venv = "%{!empty($VIRTUAL_ENV) ? fnamemodify($VIRTUAL_ENV, ':t') : ''}"
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P'
  return '[%n] %f %<'.mod.ro.ft.fug.sep.venv.pos.'%*'.pct
endfunction
let &statusline = s:statusline_expr()
" }}}

" fzf {{{
" Using floating windows of Neovim to start fzf
if has('nvim')
  function! FloatingFZF(width, height, border_highlight)
    function! s:create_float(hl, opts)
      let buf = nvim_create_buf(v:false, v:true)
      let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
      let win = nvim_open_win(buf, v:true, opts)
      call setwinvar(win, '&winhighlight', 'NormalFloat:'.a:hl)
      call setwinvar(win, '&colorcolumn', '')
      return buf
    endfunction

    " Size and position
    let width = float2nr(&columns * a:width)
    let height = float2nr(&lines * a:height)
    let row = float2nr((&lines - height) / 2)
    let col = float2nr((&columns - width) / 2)

    " Border
    let top = '╭' . repeat('─', width - 2) . '╮'
    let mid = '│' . repeat(' ', width - 2) . '│'
    let bot = '╰' . repeat('─', width - 2) . '╯'
    let border = [top] + repeat([mid], height - 2) + [bot]

    " Draw frame
    let s:frame = s:create_float(a:border_highlight, {'row': row, 'col': col, 'width': width, 'height': height})
    call nvim_buf_set_lines(s:frame, 0, -1, v:true, border)

    " Draw viewport
    call s:create_float('Normal', {'row': row + 1, 'col': col + 2, 'width': width - 4, 'height': height - 2})
    autocmd BufWipeout <buffer> execute 'bwipeout' s:frame
  endfunction

  let g:fzf_layout = { 'window': 'call FloatingFZF(0.9, 0.6, "Comment")' }
endif

" Hide statusline
if has('nvim') && !exists('g:fzf_layout')
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
endif

nnoremap <leader><leader> :Files<CR>
" }}}


if has('nvim-0.5')
  set completeopt-=preview
  set completeopt+=menuone,noselect
  let g:mucomplete#enable_auto_at_startup = 1
  " Plug 'prabirshrestha/asyncomplete.vim'
  " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  " Plug 'Shougo/deoplete-lsp'
  " let g:deoplete#enable_at_startup = 1
  " Plug 'ervandew/supertab'
  " Plug 'w0rp/ale'
  " let g:ale_lint_on_text_changed = 1
  " let g:ale_lint_on_save = 1
  " let g:ale_lint_delay = 100
  " nmap ]a <Plug>(ale_next_wrap)
  " nmap [a <Plug>(ale_previous_wrap)
endif


" Golang
" Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
" NOTE: Figure out how to lazy load
" Plug 'mrk21/yaml-vim'
" Plug 'gabrielelana/vim-markdown'
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" Basically IDE
" Plug 'ludovicchabant/vim-gutentags'
" Lint
" Plug 'maralla/completor.vim' " NOTE: Uses JEDI already
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
call plug#end()
endif

" }}}

" UI Settings {{{
" Don't use termguicolors with Terminal.app
if has('termguicolors') && $TERM_PROGRAM != "Apple_Terminal"
  set termguicolors
endif

if has('gui_running')
  set guioptions=a
endif

" Theme Nord {{{
let g:nord_italic = 1
let g:nord_underline = 1
let g:nord_italic_comments = 1
let g:nord_uniform_status_lines = 1
let g:nord_uniform_diff_background = 1
" NOTE: 'syntax on' and 'set background=dark' are defaults
"   Also setting background or syntax after color results in second sourcing
silent! colorscheme nord
hi Conceal guifg=#888888 ctermfg=9 guibg=NONE ctermbg=10 gui=NONE cterm=NONE
" }}}

" Enable transparency
highlight Normal ctermbg=none
highlight NonText ctermbg=none

set number                                      " Line numbers are on
set showmatch                                   " Show matching brackets/parenthesis
set incsearch                                   " Find as you type search
set ignorecase                                  " Case insensitive search
set smartcase                                   " Case sensitive when uc present
set wildmenu                                    " Show a list of completions for commands
set wildmode=list:longest,full                  " Command <Tab> completion, list matches,then longest part, then all.
set whichwrap=b,s,h,l,<,>,[,]                   " Backspace and cursor keys wrap too
set scrolljump=5                                " Lines to scroll when cursor leaves screen
set scrolloff=3                                 " Minimum lines to keep above/below cursor
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.  " Highlight problematic whitespace
set foldmethod=indent
set foldlevelstart=99
set noerrorbells visualbell t_vb=               " Disable the annoying bells
set splitbelow
set splitright
set showmode        " Display the current mode

" tnoremap <Esc> <C-\><C-n>
if has('nvim')
  au TermOpen * setlocal nonumber norelativenumber
  set inccommand=split
endif
autocmd vimrc FileType python let &colorcolumn=80
" }}}

" Basic settings {{{

set formatoptions+=r
set formatoptions-=o
set signcolumn=yes

" let g:loaded_matchit = 1 " Don't need it
" let g:loaded_gzip = 1 " Gzip is pointless
" let g:loaded_zipPlugin = 1 " zip is also pointless
" let g:loaded_logipat = 1 " No logs
" let g:loaded_2html_plugin = 1 " Disable 2html
" let g:loaded_rrhelper = 1 " I don't use r
" let g:loaded_getscriptPlugin = 1 " Dont need it
" let g:loaded_tarPlugin = 1 " Nope

" How to check LSP enabled
" if luaeval('vim.lsp.buf.server_ready()')

" let g:coc_global_extensions = ['coc-python']
" 
" augroup coc-config
"   autocmd!
"   autocmd VimEnter * nmap <silent> gd <Plug>(coc-definition)
"   autocmd VimEnter * nmap <silent> g? <Plug>(coc-references)
" augroup END


" Plugin's settings {{{
let g:gruvbox_contrast_dark = 'soft'

let g:gutentags_cache_dir='~/.cache/tags'

" let g:ale_set_highlights = 0
" let g:ale_sign_column_always = 1
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_sign_error = '•'
" let g:ale_sign_warning = '•'
" let g:ale_echo_msg_error_str =  '✹ Error'
" let g:ale_echo_msg_warning_str = '⚠ Warning'

" let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" }}}

" Basic settings {{{

" No need in Import when tags completion used
" set complete-=i

set title " Title for timetracking
set nostartofline

set keymap=russian-jcukenwin
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
set iminsert=0
set imsearch=-1
set spelllang=ru_ru,en_us

set fileformats=unix,dos,mac
set modeline

set timeoutlen=500

" Tab settings
set tabstop=4 softtabstop=2 shiftwidth=2 expandtab smarttab
set autoindent smartindent
set showcmd
set virtualedit=onemore

set cursorline

set clipboard+=unnamed

set textwidth=0

" Don't break a line after one-letter word.
" Remove comment leader when joining lines
set formatoptions+=1j

let &showbreak = '↳ '
set breakindent
set breakindentopt=sbr

set exrc

set laststatus=2

set gdefault
set hlsearch

set backspace=indent,eol,start

set shortmess=aIT

" TTY settings for Vim only.
if !has('nvim')
  set ttyfast ttymouse=xterm2 ttyscroll=3
endif

set mouse=a
set autoread
set hidden

set modelines=2
" }}}

" Autocmd {{{

" set working directory to git project root
" or directory of current file if not git project
function! SetProjectRoot()
  " default to the current file's directory
  lcd %:p:h
  let git_dir = system("git rev-parse --show-toplevel")
  " See if the command output starts with 'fatal' (if it does, not in a git repo)
  let is_not_git_dir = matchstr(git_dir, '^fatal:.*')
  " if git project, change local directory to git project root
  if empty(is_not_git_dir)
    lcd `=git_dir`
  endif
endfunction

augroup vimrc
  autocmd!
  " Autosource vimrc if saved.
  autocmd BufWritePost $MYVIMRC source %
  " TODO
  " autocmd BufRead * call SetProjectRoot()
  autocmd CursorMoved silent *
        \ if &filetype == 'netrw' |
        \   call SetProjectRoot() |
        \ endif
  " Return to last edit position when opening files.
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END
" }}}

" Mappings {{{
nnoremap Q @q
map Y y$

nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>s :set spell! <ENTER>
nnoremap <leader>v V`]

nnoremap <C-p> :GFiles<CR>
nnoremap <leader>b :Buffers<CR>
function! s:journal(count)
  call vimwiki#diary#make_note(count)
  normal! Go
  put=system('date \"+##%e %B, %A в %H:%M\"')
endfunction
command! -count=0 Journal call s:journal(<count>)
nmap <leader>wj :Journal<cr>
nnoremap <tab> <C-W><C-W>

" ----------------------------------------------------------------------------
" Markdown headings
" ----------------------------------------------------------------------------
nnoremap <leader>1 m`yypVr=``
nnoremap <leader>2 m`yypVr-``
nnoremap <leader>3 m`^i### <esc>``4l
nnoremap <leader>4 m`^i#### <esc>``5l
nnoremap <leader>5 m`^i##### <esc>``6l

nnoremap <leader>vs :50Vex!<CR>
vnoremap <leader>da :<C-U>1,'<-1:delete<CR>:'>+1,$:delete<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
inoremap <C-U> <C-G>u<C-U>

function! s:profile(bang)
  if a:bang
    profile pause
    noautocmd qall
  else
    profile start vim-profile.log
    profile func *
    profile file *
  endif
endfunction
command! -bang Profile call s:profile(<bang>0)

" }}}

" if has('nvim-0.5')
" lua << EOF
"   local nvim_lsp = require 'nvim_lsp'
" 
"   local on_attach = function(client, bufnr)
"     -- require'diagnostic'.on_attach()
"     -- require'completion'.on_attach()
"     -- print(vim.inspect(client.resolved_capabilities))
" 
"     -- Mappings.
"     local opts = { noremap=true, silent=true }
"     local set_keymap = vim.api.nvim_buf_set_keymap
"     set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
"     set_keymap(bufnr, 'n', '<c-]>', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
"     set_keymap(bufnr, 'n', 'g?', '<cmd>lua vim.lsp.buf.references()<CR><cmd>copen<CR>', opts)
"     set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
"     set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
"     set_keymap(bufnr, 'n', '<c-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
"     set_keymap(bufnr, 'n', '1gD', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
"     set_keymap(bufnr, 'n', 'g0', '<cmd>lua vim.lsp.buf.peek_definition()<CR>', opts)
"     set_keymap(bufnr, 'n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
"     -- Omni completion
"     vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
"   end
"   
"   local method = "textDocument/publishDiagnostics"
"   local default_callback = vim.lsp.callbacks[method]
"   vim.lsp.callbacks[method] = function(err, method, result, client_id)
"     default_callback(err, method, result, client_id)
"     if result and result.diagnostics then
"       for _, v in ipairs(result.diagnostics) do
"         v.bufnr = client_id
"         v.lnum = v.range.start.line + 1
"         v.col = v.range.start.character + 1
"         v.text = v.message
"       end
"       vim.lsp.util.set_qflist(result.diagnostics)
"     end
"   end
" 
"   -- local method = 'textDocument/publishDiagnostics'
"   -- local default_callback = vim.lsp.callbacks[method]
"   -- vim.lsp.callbacks[method] = function(err, method, result, client_id)
"   -- if not result then return end
"   --   local uri = result.uri
"   --   local bufnr = vim.uri_to_bufnr(uri)
"   --   if not bufnr then
"   --     err_message("LSP.publishDiagnostics: Couldn't find buffer for ", uri)
"   --     return
"   --   end
"   --   vim.lsp.util.buf_clear_diagnostics(bufnr)
"   --   vim.lsp.util.buf_diagnostics_save_positions(bufnr, result.diagnostics)
"   --   vim.lsp.util.buf_diagnostics_underline(bufnr, result.diagnostics)
"   -- end
" 
"   nvim_lsp.pyls_ms.setup{
"     on_attach = on_attach,
"     root_dir = nvim_lsp.util.root_pattern('.git', "."),
"   }
" 
"   -- sign column
"   vim.api.nvim_command("sign define LspDiagnosticsErrorSign text=× texthl=LspDiagnosticsError linehl= numhl=") -- ✖
"   vim.api.nvim_command("sign define LspDiagnosticsWarningSign text=! texthl=LspDiagnosticsWarning linehl= numhl=") -- ⚠
"   vim.api.nvim_command("sign define LspDiagnosticsInformationSign text=i texthl=LspDiagnosticsInformationSign linehl= numhl=") -- ℹ
"   vim.api.nvim_command("sign define LspDiagnosticsHintSign text=› texthl=LspDiagnosticsHintSign linehl= numhl=") -- ➤
" 
"   -- vim.api.nvim_command("highlight! link LspDiagnosticsError SpellBad")
"   -- vim.api.nvim_command("highlight! link LspDiagnosticsWarning SpellRare")
"   -- vim.api.nvim_command("highlight! link LspDiagnosticsInformation SpellCap")
"   -- vim.api.nvim_command("highlight! link LspDiagnosticsHint SpellLocal")
"   -- vim.api.nvim_command("highlight! link LspReferenceText Search")
"   -- vim.api.nvim_command("highlight! link LspReferenceRead Search")
"   -- vim.api.nvim_command("highlight! link LspReferenceWrite Search")
" 
"   --[[
"     Logging/debugging
"     Log levels by name: "trace", "debug", "info", "warn", "error"
"     The log path should typically be ~/.local/share/nvim/vim-lsp.log
"   --]]
"   -- vim.lsp.set_log_level("info")
"   -- print(vim.lsp.get_log_path())
" EOF
" endif

